import sqlite3
import telebot
from telebot import types

API_TOKEN = '6561744201:AAFlX7bqKzRCLIQglCDCh5S80PQjCArBqXc'
bot = telebot.TeleBot(API_TOKEN, parse_mode='HTML')
con = sqlite3.connect('main_beta.db', check_same_thread=False)
admins_id = [1142412436]
classes = ['queue_opd', 'queue_prog']
classes_names = ['üíæ –û–ü–î', 'üíª –ü—Ä–æ–≥–∞']
fb_list = ['opd_fb', 'prog_fb']
class_dates = ['12.08.23', '15.08.23']


@bot.message_handler(commands=['start', 'help', 'menu'])
def send_welcome(message):
    cur = con.cursor()
    cur.execute(f'SELECT * FROM users WHERE tg_id = {message.from_user.id};')
    if len(cur.fetchall()) == 0:
        bot.send_message(message.from_user.id, "–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞), –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
        bot.register_next_step_handler(message, new_reg)
    else:
        cur.execute(f'SELECT last_message FROM users WHERE tg_id = {message.from_user.id};')
        temp = cur.fetchall()[0][0]
        if temp is not None:
            bot.delete_message(message.from_user.id, temp)
        markup, st = get_queues_list_text(message.from_user.id)
        lst_msg = bot.send_message(message.from_user.id, st, reply_markup=markup).message_id
        cur.execute(f'UPDATE users SET last_message = {lst_msg} WHERE tg_id = {message.from_user.id};')
        con.commit()
        if fb_alert(message.from_user.id):
            bot.send_message(message.from_user.id, "‚ùóÔ∏è–°–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –æ–ø—Ä–æ—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –µ—â–µ –Ω–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞)!")
        markup_1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup_1.add(types.KeyboardButton("–ü–æ–ª–Ω—ã–µ —Å–ø–∏—Å–∫–∏"), types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã"))
        bot.send_message(message.from_user.id, "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã:", reply_markup=markup_1)


@bot.message_handler(func=lambda message: message.text == '/adm' and message.from_user.id in admins_id)
def send_admin(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("üèÅ –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞"), types.KeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞"),
               types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
    bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞!", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å" and message.from_user.id in admins_id)
def change_status_1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in classes_names:
        markup.add(types.KeyboardButton(i))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    bot.send_message(message.from_user.id, "–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?", reply_markup=markup)
    bot.register_next_step_handler(message, change_status_2)


def change_status_2(message):
    if message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        send_admin(message)
    else:
        num = classes_names.index(message.text)
        bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å "
                                               f"–≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {classes_names[num]}")
        bot.register_next_step_handler(message, change_status_3, num)


def change_status_3(message, num):
    cur = con.cursor()
    cur.execute(f'SELECT {classes[num]} FROM users WHERE name = "{message.text}";')
    temp = cur.fetchall()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if len(temp) == 0:
        bot.send_message(message.from_user.id, f"–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        send_admin(message)
    elif temp[0][0] == 0:
        markup.add(types.KeyboardButton("–î–∞, –ø–æ—Å—Ç–∞–≤–∏—Ç—å"), types.KeyboardButton("–ù–µ—Ç"))
        bot.send_message(message.from_user.id,
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {classes_names[num]}, –ø–æ—Å—Ç–∞–≤–∏—Ç—å?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, change_status_4, num, message.text)
    else:
        markup.add(types.KeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å"), types.KeyboardButton("–ù–µ—Ç"))
        bot.send_message(message.from_user.id,
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {classes_names[num]}, —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, change_status_4, num, message.text)


def change_status_4(message, num, name):
    cur = con.cursor()
    cur.execute(f'SELECT tg_id FROM users WHERE name = "{name}";')
    tg = cur.fetchall()[0][0]
    if message.text == '–î–∞, –ø–æ—Å—Ç–∞–≤–∏—Ç—å':
        cur.execute(f'SELECT MAX({classes[num]}) FROM users;')
        cur_num = cur.fetchall()[0][0] + 1
        cur.execute(f'UPDATE users SET {classes[num]} = {cur_num} WHERE tg_id = {tg};')
        con.commit()
        bot.send_message(tg, f"üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {classes_names[num]}")
        markup, st = get_queues_list_text(tg)
        cur.execute(f'SELECT last_message FROM users WHERE tg_id = {tg};')
        lst_msg = cur.fetchall()[0][0]
        bot.edit_message_text(st, tg, lst_msg, reply_markup=markup)
        bot.send_message(message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ–Ω –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä - {cur_num}")
        send_admin(message)
    elif message.text == '–î–∞, —É–¥–∞–ª–∏—Ç—å':
        cur.execute(f'UPDATE users SET {classes[num]} = 0 WHERE tg_id = {tg};')
        con.commit()
        markup, st = get_queues_list_text(tg)
        cur.execute(f'SELECT last_message FROM users WHERE tg_id = {tg};')
        lst_msg = cur.fetchall()[0][0]
        bot.edit_message_text(st, tg, lst_msg, reply_markup=markup)
        bot.send_message(tg, f"üö® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {classes_names[num]}")
        bot.send_message(message.from_user.id, "–£–¥–∞–ª–µ–Ω–æ")
        send_admin(message)
    else:
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
        send_admin(message)


@bot.message_handler(func=lambda message: message.text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞" and message.from_user.id in admins_id)
def stop_poll_1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in classes_names:
        markup.add(types.KeyboardButton(i))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    bot.send_message(message.from_user.id, "–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å?", reply_markup=markup)
    bot.register_next_step_handler(message, stop_poll_2)


def stop_poll_2(message):
    if message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        send_admin(message)
    else:
        num = classes_names.index(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
        bot.send_message(message.from_user.id,
                         f"–¢–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ {classes_names[num]} –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö?", reply_markup=markup)
        bot.register_next_step_handler(message, stop_poll_3, num)


def stop_poll_3(message, num):
    if message.text == '–î–∞':
        bot.send_message(message.from_user.id, f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ä–æ—Å –ø–æ {classes_names[num]} –æ—Ç {class_dates[num]}")
        stop_poll(num)
        send_admin(message)
    else:
        bot.send_message(message.from_user.id, f"–û—Ç–º–µ–Ω–µ–Ω–æ")
        send_admin(message)


@bot.message_handler(func=lambda message: message.text == 'üèÅ –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞' and message.from_user.id in admins_id)
def start_poll_1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in classes_names:
        markup.add(types.KeyboardButton(i))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    bot.send_message(message.from_user.id, "–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å?", reply_markup=markup)
    bot.register_next_step_handler(message, start_poll_2)


def start_poll_2(message):
    if message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        send_admin(message)
    else:
        num = classes_names.index(message.text)
        bot.send_message(message.from_user.id, f"–í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –ø–æ {classes_names[num]}")
        bot.register_next_step_handler(message, start_poll_3, num)


def start_poll_3(message, num):
    class_dates[num] = message.text
    bot.send_message(message.from_user.id, f"–ù–∞—á–∞—Ç –æ–ø—Ä–æ—Å –ø–æ {classes_names[num]} –æ—Ç {class_dates[num]}")
    select_fb_list(num)
    send_admin(message)



def auto_stop_poll(num):
    cur = con.cursor()
    cur.execute(f'SELECT tg_id FROM users WHERE {fb_list[num]} = 1;')
    if len(cur.fetchall()) == 0:
        stop_poll(num)


def stop_poll(num):
    cur = con.cursor()
    cur.execute(f'SELECT tg_id, name, {fb_list[num]} FROM users WHERE ({fb_list[num]} = 1) OR ({fb_list[num]} = 2) '
                f'OR ({fb_list[num]} = 3) GROUP BY {classes[num]};')
    s = f'–û–ø—Ä–æ—Å –ø–æ {classes_names[num]} –æ—Ç {class_dates[num]} –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–æ—Ç –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n'
    temp = cur.fetchall()
    for i in range(len(temp)):
        if temp[i][2] == 1:
            s += f'\n{i + 1}. {temp[i][1]} ‚Äî ‚ùì (== ‚úÖ)'
        elif temp[i][2] == 2:
            s += f'\n{i + 1}. {temp[i][1]} ‚Äî ‚úÖ'
        elif temp[i][2] == 3:
            s += f'\n{i + 1}. {temp[i][1]} ‚Äî ‚ùå'
    cur.execute(f'UPDATE users SET {classes[num]} = 0 WHERE ({fb_list[num]} = 1) OR ({fb_list[num]} = 2);')
    cur.execute(f'UPDATE users SET {fb_list[num]} = 0 WHERE {fb_list[num]} <> 0;')
    con.commit()
    s += f'\n\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å–ø–∏—Å–æ–∫ {classes_names[num]} –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n'
    s += get_full_list(num, None)
    s += '\n\n<i>–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—Ö–æ–¥–∏—Ç—å –∏ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É</i>'
    for i in temp:
        bot.send_message(i[0], s)


@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–ø—Ä–æ—Å—ã")
def show_polls(message):
    cur = con.cursor()
    s, markup = get_polls_list(message.from_user.id)
    if s == '‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, –¥–æ—Å—Ç—É–Ω—ã—Ö —Ç–µ–±–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è':
        send_welcome(message)
        bot.send_message(message.from_user.id, s)
    else:
        cur.execute(f'SELECT last_fb FROM users WHERE tg_id = {message.from_user.id};')
        temp = cur.fetchall()[0][0]
        if temp is not None:
            bot.delete_message(message.from_user.id, temp)
        send_welcome(message)
        lst = bot.send_message(message.from_user.id, s, reply_markup=markup).message_id
        cur.execute(f'UPDATE users SET last_fb = {lst} WHERE tg_id = {message.from_user.id};')
        con.commit()


def get_polls_list(id):
    cur = con.cursor()
    cur.execute(f'SELECT {", ".join(fb_list)} FROM users WHERE tg_id = {id};')
    s = ''
    k = 0
    markup = types.InlineKeyboardMarkup()
    for i in cur.fetchall()[0]:
        if i == 1:
            s += f'\n{classes_names[k]} –æ—Ç {class_dates[k]}'
            markup.add(types.InlineKeyboardButton(f"‚úÖ –í—ã—Å—Ç—É–ø–∏–ª(–∞) –Ω–∞ {classes_names[k]} {class_dates[k]}",
                                                  callback_data=f'fbY_{k}'))
            markup.add(types.InlineKeyboardButton(f"‚ùå –ù–ï –≤—ã—Å—Ç—É–ø–∏–ª(–∞) –Ω–∞ {classes_names[k]} {class_dates[k]}",
                                                  callback_data=f'fbN_{k}'))
        elif i == 2:
            s += f'\n{classes_names[k]} –æ—Ç {class_dates[k]} ‚Äî ‚úÖ –¢—ã –≤—ã—Å—Ç—É–ø–∏–ª(–∞) –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏'
        elif i == 3:
            s += f'\n{classes_names[k]} –æ—Ç {class_dates[k]} ‚Äî ‚ùå –¢—ã –ù–ï –≤—ã—Å—Ç—É–ø–∏–ª(–∞) –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏'
        k += 1
    if s == '':
        s = "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, –¥–æ—Å—Ç—É–Ω—ã—Ö —Ç–µ–±–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è"
    else:
        s = "–°–µ–π—á–∞—Å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è:\n" + s
        s += "\n\n–í—ã–±–µ—Ä–∏, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö:"
    return s, markup


@bot.callback_query_handler(func=lambda call: call.data[:2] == "fb")
def callbacks_fb(call):
    cur = con.cursor()
    num = int(call.data[4:])
    if call.data[2] == 'Y':
        cur.execute(f'UPDATE users SET {fb_list[num]} = 2 WHERE tg_id = {call.message.chat.id};')
        con.commit()
        s, markup = get_polls_list(call.message.chat.id)
        bot.edit_message_text(s, call.message.chat.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id, "–¢—ã –≤—ã—Å—Ç—É–ø–∏–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏")
    elif call.data[2] == 'N':
        cur.execute(f'UPDATE users SET {fb_list[num]} = 3 WHERE tg_id = {call.message.chat.id};')
        con.commit()
        s, markup = get_polls_list(call.message.chat.id)
        bot.edit_message_text(s, call.message.chat.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id, "–¢—ã –ù–ï –≤—ã—Å—Ç—É–ø–∏–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏")
    auto_stop_poll(num)


def select_fb_list(num):
    cur = con.cursor()
    cur.execute(f'SELECT tg_id FROM users WHERE {classes[num]} <> 0;')
    for i in cur.fetchall():
        if i[0] != 0:
            cur.execute(f'UPDATE users SET {fb_list[num]} = 1 WHERE tg_id = {i[0]};')
            bot.send_message(i[0], f"‚ùóÔ∏è –û—Ç–∫—Ä—ã—Ç –æ–ø—Ä–æ—Å –ø–æ {classes_names[num]} –æ—Ç {class_dates[num]}\n–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                                f"–ø—Ä–∏–Ω—è—Ç—å –≤ –Ω—ë–º —É—á–∞—Å—Ç–∏–µ!")
    con.commit()


# Returns True if there are NOT any started polls in this class
def restrictions_check(id, num):
    cur = con.cursor()
    cur.execute(f'SELECT {fb_list[num]} FROM users WHERE tg_id = {id};')
    if all(i == 0 for i in cur.fetchall()[0]):
        return True
    else:
        return False


def fb_alert(id):
    cur = con.cursor()
    cur.execute(f'SELECT {", ".join(fb_list)} FROM users WHERE tg_id = {id};')
    if any(i == 1 for i in cur.fetchall()[0]):
        return True
    else:
        return False


@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª–Ω—ã–µ —Å–ø–∏—Å–∫–∏')
def see_lists_1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for clas in classes_names:
        markup.add(types.KeyboardButton(clas))
    markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–ª–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏:",
                     reply_markup=markup)
    bot.register_next_step_handler(message, see_lists_2)


def see_lists_2(message):
    if message.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        send_welcome(message)
    elif message.text in classes_names:
        ind = classes_names.index(message.text)
        st = get_full_list(ind, message.from_user.id)
        st = f'–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ {classes_names[ind]}:\n' + st + '\n\n<i>–¢—ã –≤—ã–¥–µ–ª–µ–Ω(–∞) –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º</i>'
        send_welcome(message)
        bot.send_message(message.from_user.id, st)
    else:
        bot.send_message(message.from_user.id, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π")
        see_lists_1(message)


def get_full_list(num, id):
    refresh_queues()
    cur = con.cursor()
    cur.execute(f'SELECT tg_id, name, {classes[num]} FROM users WHERE {classes[num]} <> 0 GROUP BY {classes[num]};')
    s = ''
    for i in cur.fetchall():
        if i[0] == id:
            s += f'\n<b>{i[2]}. {i[1]}</b>'
        else:
            s += f'\n{i[2]}. {i[1]}'
    return s

@bot.callback_query_handler(func=lambda call: call.data == 'update')
def callbacks_update(call):
    markup, st = get_queues_list_text(call.message.chat.id)
    try:
        bot.edit_message_text(st, call.message.chat.id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except telebot.apihelper.ApiTelegramException:
        bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")


@bot.callback_query_handler(func=lambda call: call.data[:6] == 'change')
def callbacks_change(call):
    num = int(call.data[7:])
    if restrictions_check(call.message.chat.id, num):
        cur = con.cursor()
        cur.execute(f'SELECT {classes[num]} FROM users WHERE tg_id = {call.message.chat.id};')
        if cur.fetchall()[0][0] != 0:
            cur.execute(f'UPDATE users SET {classes[num]} = 0 WHERE tg_id = {call.message.chat.id};')
            con.commit()
            markup, st = get_queues_list_text(call.message.chat.id)
            bot.edit_message_text(st, call.message.chat.id, call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id, f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ {classes_names[num]}")
        else:
            cur.execute(f'SELECT MAX({classes[num]}) FROM users;')
            cur_num = cur.fetchall()[0][0] + 1
            cur.execute(f'UPDATE users SET {classes[num]} = {cur_num} WHERE tg_id = {call.message.chat.id};')
            con.commit()
            markup, st = get_queues_list_text(call.message.chat.id)
            bot.edit_message_text(st, call.message.chat.id, call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {classes_names[num]}")
    else:
        bot.answer_callback_query(call.id,
                                  f"‚ö†Ô∏è –ó–∞–ø—Ä–µ—â–µ–Ω–æ ‚ö†Ô∏è \n–û—Ç–∫—Ä—ã—Ç –æ–ø—Ä–æ—Å –æ –ø—Ä–æ—à–µ–¥–Ω–µ–º –∑–∞–Ω—è—Ç–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–Ω–µ—Å–µ–Ω(–∞) \n–ñ–¥–∏ "
                                  f"–∑–∞–∫—Ä—ã—Ç–∏—è", show_alert=True)


def get_queues_list(id):
    global classes
    cur = con.cursor()
    cur.execute(f'SELECT {", ".join(classes)} FROM users WHERE tg_id = {id}')
    return [i for i in cur.fetchall()[0]]


def get_queues_list_text(id):
    refresh_queues()
    s = '–°–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Å–ø–∏—Å–∫–∞—Ö:\n'
    q = get_queues_list(id)
    markup = types.InlineKeyboardMarkup()
    for i in range(len(q)):
        s += f'\n{classes_names[i]} ‚Äî {"‚ùå –¢—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏" if q[i] == 0 else ("‚úÖ –¢–≤–æ–π –Ω–æ–º–µ—Ä: " + str(q[i]))}'
        markup.add(types.InlineKeyboardButton(f"‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ {classes_names[i]}", callback_data=f'change_{i}') if q[i] == 0
                   else types.InlineKeyboardButton(f"‚ùå –í—ã–π—Ç–∏ –∏–∑ {classes_names[i]}", callback_data=f'change_{i}'))
    markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞", callback_data='update'))
    s += '\n\n–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:'
    return markup, s


def refresh_queues():
    cur = con.cursor()
    for clas in classes:
        cur.execute(f'SELECT id FROM users WHERE {clas} <> 0 GROUP BY {clas};')
        k = 1
        for i in cur.fetchall():
            cur.execute(f'UPDATE users SET {clas} = {k} WHERE id = {i[0]};')
            k += 1
    con.commit()


def new_reg(message):
    cur = con.cursor()
    cur.execute(f'SELECT tg_id FROM users WHERE name = "{message.text}";')
    temp = cur.fetchall()
    if len(temp) == 0:
        bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ")
        bot.register_next_step_handler(message, new_reg)
    elif temp[0][0] != 0:
        bot.send_message(message.from_user.id, "–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ")
        bot.register_next_step_handler(message, new_reg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton("/menu"))
        cur.execute(f'UPDATE users SET tg_id = {message.from_user.id} WHERE name = "{message.text}";')
        bot.send_message(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        con.commit()
        send_welcome(message)


bot.polling(none_stop=True, interval=2)